# Production-hardened Docker Compose configuration
version: '3.8'

services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: audithound-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - ./nginx/logs:/var/log/nginx
      - web-static:/var/www/static:ro
    depends_on:
      - api
      - dashboard
    networks:
      - frontend
      - backend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Service (Multiple instances for load balancing)
  api:
    image: audithound/api:${VERSION:-latest}
    restart: unless-stopped
    scale: 3
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - RATE_LIMIT_ENABLED=true
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - api-logs:/app/logs
      - ./ssl:/app/ssl:ro
    networks:
      - backend
      - database
    depends_on:
      - postgres
      - redis
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
      - /var/tmp:noexec,nosuid,size=64m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Dashboard Service
  dashboard:
    image: audithound/dashboard:${VERSION:-latest}
    restart: unless-stopped
    environment:
      - API_URL=http://api:8000
      - ENVIRONMENT=production
      - DEBUG=false
      - SESSION_SECRET=${SESSION_SECRET}
      - SECURE_COOKIES=true
      - CSRF_PROTECTION=true
    volumes:
      - dashboard-logs:/app/logs
      - web-static:/app/static
    networks:
      - backend
    depends_on:
      - api
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Worker Services (for background tasks)
  worker:
    image: audithound/worker:${VERSION:-latest}
    restart: unless-stopped
    scale: 2
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKER_CONCURRENCY=4
    volumes:
      - worker-logs:/app/logs
    networks:
      - backend
      - database
    depends_on:
      - postgres
      - redis
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 384M

  # Scheduler Service
  scheduler:
    image: audithound/scheduler:${VERSION:-latest}
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - scheduler-logs:/app/logs
    networks:
      - backend
      - database
    depends_on:
      - postgres
      - redis
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=32m

  # PostgreSQL Database (Production-hardened)
  postgres:
    image: postgres:15-alpine
    container_name: audithound-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - database
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID
    user: "999:999"
    shm_size: 256m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Cache (Production-hardened)
  redis:
    image: redis:7-alpine
    container_name: audithound-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    volumes:
      - redis-data:/data
      - redis-logs:/var/log/redis
    networks:
      - backend
      - database
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Weaviate Vector Database (Production-hardened)
  weaviate:
    image: semitechnologies/weaviate:1.22.0
    container_name: audithound-weaviate
    restart: unless-stopped
    environment:
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=false
      - AUTHENTICATION_APIKEY_ENABLED=true
      - AUTHENTICATION_APIKEY_ALLOWED_KEYS=${WEAVIATE_API_KEY}
      - AUTHENTICATION_APIKEY_USERS=${WEAVIATE_USERS}
      - AUTHORIZATION_ADMINLIST_ENABLED=true
      - AUTHORIZATION_ADMINLIST_USERS=${WEAVIATE_ADMIN_USERS}
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-openai
      - ENABLE_MODULES=text2vec-openai,generative-openai
      - CLUSTER_HOSTNAME=weaviate
      - CLUSTER_GOSSIP_BIND_PORT=7100
      - CLUSTER_DATA_BIND_PORT=7101
      - OPENAI_APIKEY=${OPENAI_API_KEY}
      - LOG_LEVEL=info
    volumes:
      - weaviate-data:/var/lib/weaviate
      - weaviate-logs:/var/log/weaviate
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: audithound-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring
      - backend
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65534:65534"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:10.0.0
    container_name: audithound-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SNAPSHOTS_EXTERNAL_ENABLED=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
      - frontend
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:472"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: audithound-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: audithound-logstash
    restart: unless-stopped
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
      - api-logs:/var/log/api:ro
      - dashboard-logs:/var/log/dashboard:ro
      - worker-logs:/var/log/worker:ro
      - scheduler-logs:/var/log/scheduler:ro
    networks:
      - logging
    depends_on:
      - elasticsearch
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: audithound-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
    networks:
      - logging
      - frontend
    depends_on:
      - elasticsearch
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"

# Networks
networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-backend
    ipam:
      config:
        - subnet: 172.21.0.0/24
  database:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-database
    ipam:
      config:
        - subnet: 172.22.0.0/24
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-monitoring
    ipam:
      config:
        - subnet: 172.23.0.0/24
  logging:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-logging
    ipam:
      config:
        - subnet: 172.24.0.0/24

# Volumes
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/redis
  weaviate-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/weaviate
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/grafana
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/data/elasticsearch
  
  # Log volumes
  api-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/api
  dashboard-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/dashboard
  worker-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/worker
  scheduler-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/scheduler
  postgres-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/postgres
  redis-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/redis
  weaviate-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/audithound/logs/weaviate
  
  # Static content
  web-static:
    driver: local