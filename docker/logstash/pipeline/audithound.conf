# Logstash configuration for AuditHound JSON logs

input {
  # File input for AuditHound JSON logs
  file {
    path => "/app/logs/*.jsonl"
    start_position => "beginning"
    codec => "json"
    tags => ["audithound", "json"]
  }
  
  # File input for security logs
  file {
    path => "/app/logs/security.jsonl"
    start_position => "beginning"
    codec => "json"
    tags => ["audithound", "security", "json"]
  }
  
  # File input for audit logs
  file {
    path => "/app/logs/audit.jsonl"
    start_position => "beginning"
    codec => "json"
    tags => ["audithound", "audit", "json"]
  }
  
  # Beats input for forwarded logs
  beats {
    port => 5044
  }
  
  # HTTP input for direct log shipping
  http {
    port => 8088
    codec => "json"
  }
}

filter {
  # Parse timestamp if it's a string
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add log source information
  mutate {
    add_field => { "log_source" => "audithound" }
  }
  
  # Parse context fields
  if [context] {
    if [context][request_id] {
      mutate {
        add_field => { "request_id" => "%{[context][request_id]}" }
      }
    }
    
    if [context][client_id] {
      mutate {
        add_field => { "client_id" => "%{[context][client_id]}" }
      }
    }
    
    if [context][user_id] {
      mutate {
        add_field => { "user_id" => "%{[context][user_id]}" }
      }
    }
  }
  
  # Parse source information
  if [source] {
    if [source][file] {
      mutate {
        add_field => { "source_file" => "%{[source][file]}" }
      }
    }
    
    if [source][function] {
      mutate {
        add_field => { "source_function" => "%{[source][function]}" }
      }
    }
    
    if [source][line] {
      mutate {
        add_field => { "source_line" => "%{[source][line]}" }
      }
    }
  }
  
  # Enhance security events
  if "security" in [tags] or [category] == "security" {
    mutate {
      add_tag => ["security_event"]
      add_field => { "log_type" => "security" }
    }
    
    # Parse security event details
    if [event_type] {
      mutate {
        add_field => { "security_event_type" => "%{event_type}" }
      }
    }
  }
  
  # Enhance audit events
  if "audit" in [tags] or [category] == "audit" {
    mutate {
      add_tag => ["audit_event"]
      add_field => { "log_type" => "audit" }
    }
  }
  
  # Enhance performance events
  if [category] == "performance" {
    mutate {
      add_tag => ["performance_event"]
      add_field => { "log_type" => "performance" }
    }
    
    if [duration_ms] {
      mutate {
        convert => { "duration_ms" => "float" }
      }
    }
  }
  
  # Parse API request logs
  if [category] == "api" {
    mutate {
      add_tag => ["api_request"]
      add_field => { "log_type" => "api" }
    }
    
    if [status_code] {
      mutate {
        convert => { "status_code" => "integer" }
      }
    }
  }
  
  # Enhance compliance events
  if [category] == "compliance" {
    mutate {
      add_tag => ["compliance_event"]
      add_field => { "log_type" => "compliance" }
    }
  }
  
  # Parse exception information
  if [exception] {
    mutate {
      add_tag => ["exception"]
      add_field => { "has_exception" => "true" }
    }
    
    if [exception][type] {
      mutate {
        add_field => { "exception_type" => "%{[exception][type]}" }
      }
    }
  }
  
  # Geoip lookup for IP addresses
  if [ip_address] {
    geoip {
      source => "ip_address"
      target => "geoip"
    }
  }
  
  # User agent parsing
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:production}"
      "service_name" => "audithound"
      "service_version" => "${SERVICE_VERSION:1.0.0}"
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "audithound-logs-%{+YYYY.MM.dd}"
    template_name => "audithound"
    template => "/usr/share/logstash/templates/audithound.json"
    template_overwrite => true
  }
  
  # Output security events to separate index
  if "security_event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "audithound-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Output audit events to separate index
  if "audit_event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "audithound-audit-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (comment out in production)
  # stdout { codec => rubydebug }
}