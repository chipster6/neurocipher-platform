# AuditHound - Simple Single-Server Deployment
# Lightweight SaaS platform for security auditing

version: '3.8'

services:
  # AuditHound Unified API Server
  audithound-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: audithound-api
    restart: unless-stopped
    ports:
      - "8000:8000"  # API endpoint
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql+asyncpg://audithound:${POSTGRES_PASSWORD}@postgres:5432/audithound
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ENVIRONMENT=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_AI_ANALYTICS=true
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml:ro
    depends_on:
      - postgres
      - redis
      - weaviate
    networks:
      - audithound-network
    command: ["api"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AuditHound Dashboard (Streamlit)
  audithound-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: audithound-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"  # Streamlit dashboard
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_BASE_URL=http://audithound-api:8000
      - DATABASE_URL=postgresql+asyncpg://audithound:${POSTGRES_PASSWORD}@postgres:5432/audithound
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - audithound-api
      - postgres
      - redis
    networks:
      - audithound-network
    command: ["streamlit"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: audithound-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=audithound
      - POSTGRES_USER=audithound
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init_unified.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - audithound-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audithound -d audithound"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: audithound-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - audithound-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate vector database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: audithound-weaviate
    restart: unless-stopped
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=false
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,generative-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"
    networks:
      - audithound-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/meta"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: audithound-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - audithound-api
      - audithound-dashboard
    networks:
      - audithound-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: audithound-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - audithound-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: audithound-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - audithound-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  audithound-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16